var cov_19u1edm9ru=function(){var path="/home/igorbag/Desktop/module-11 - istanbul/api.js";var hash="46ca3c91f37df4bab7c0b51f3cbec831b38ef278";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/igorbag/Desktop/module-11 - istanbul/api.js",statementMap:{"0":{start:{line:18,column:4},end:{line:18,column:19}},"1":{start:{line:21,column:4},end:{line:21,column:21}},"2":{start:{line:25,column:4},end:{line:25,column:21}},"3":{start:{line:27,column:12},end:{line:27,column:41}},"4":{start:{line:28,column:0},end:{line:28,column:75}},"5":{start:{line:30,column:19},end:{line:30,column:50}},"6":{start:{line:32,column:0},end:{line:34,column:2}},"7":{start:{line:37,column:13},end:{line:37,column:28}},"8":{start:{line:38,column:16},end:{line:38,column:67}},"9":{start:{line:39,column:16},end:{line:39,column:70}},"10":{start:{line:41,column:19},end:{line:41,column:53}},"11":{start:{line:42,column:19},end:{line:42,column:76}},"12":{start:{line:44,column:19},end:{line:44,column:53}},"13":{start:{line:45,column:19},end:{line:45,column:76}},"14":{start:{line:47,column:19},end:{line:47,column:53}},"15":{start:{line:49,column:20},end:{line:49,column:43}},"16":{start:{line:50,column:14},end:{line:50,column:30}},"17":{start:{line:51,column:15},end:{line:51,column:32}},"18":{start:{line:52,column:16},end:{line:52,column:41}},"19":{start:{line:53,column:28},end:{line:53,column:47}},"20":{start:{line:55,column:22},end:{line:62,column:1}},"21":{start:{line:64,column:12},end:{line:66,column:2}},"22":{start:{line:69,column:4},end:{line:69,column:52}},"23":{start:{line:69,column:33},end:{line:69,column:51}},"24":{start:{line:77,column:23},end:{line:77,column:40}},"25":{start:{line:78,column:24},end:{line:78,column:72}},"26":{start:{line:79,column:24},end:{line:79,column:72}},"27":{start:{line:84,column:4},end:{line:92,column:6}},"28":{start:{line:93,column:4},end:{line:100,column:6}},"29":{start:{line:96,column:12},end:{line:98,column:13}},"30":{start:{line:103,column:4},end:{line:103,column:27}},"31":{start:{line:106,column:4},end:{line:110,column:6}},"32":{start:{line:112,column:4},end:{line:112,column:21}},"33":{start:{line:113,column:4},end:{line:113,column:51}},"34":{start:{line:115,column:4},end:{line:115,column:15}},"35":{start:{line:117,column:0},end:{line:117,column:23}}},fnMap:{"0":{name:"mapRoutes",decl:{start:{line:68,column:9},end:{line:68,column:18}},loc:{start:{line:68,column:38},end:{line:70,column:1}},line:68},"1":{name:"(anonymous_1)",decl:{start:{line:69,column:23},end:{line:69,column:24}},loc:{start:{line:69,column:33},end:{line:69,column:51}},line:69},"2":{name:"main",decl:{start:{line:72,column:15},end:{line:72,column:19}},loc:{start:{line:72,column:22},end:{line:116,column:1}},line:72},"3":{name:"(anonymous_3)",decl:{start:{line:95,column:18},end:{line:95,column:19}},loc:{start:{line:95,column:37},end:{line:99,column:9}},line:95}},branchMap:{"0":{loc:{start:{line:27,column:12},end:{line:27,column:41}},type:"binary-expr",locations:[{start:{line:27,column:12},end:{line:27,column:32}},{start:{line:27,column:36},end:{line:27,column:41}}],line:27},"1":{loc:{start:{line:28,column:3},end:{line:28,column:34}},type:"binary-expr",locations:[{start:{line:28,column:3},end:{line:28,column:17}},{start:{line:28,column:21},end:{line:28,column:34}}],line:28}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();/**
 * 1o Add procfile
 * 2o up to heroku
 * 2o add mlab
 * 3o run NODE_ENV=prod npm t
 * 4o add postgres
 * 5o add process.env.SSL_DB
 * 6o add sequelize ssl
 * 7o modify npm t --timeout 10000
 * 8o upto heroku
 * 9o install pm2
 * 10 up to heroku
 * 11 add pm2 to pre-install
 * 12 up to heroku
 */const{join}=(cov_19u1edm9ru.s[0]++,require('path'));const{config}=(cov_19u1edm9ru.s[1]++,require('dotenv'));const{ok}=(cov_19u1edm9ru.s[2]++,require('assert'));const env=(cov_19u1edm9ru.s[3]++,(cov_19u1edm9ru.b[0][0]++,process.env.NODE_ENV)||(cov_19u1edm9ru.b[0][1]++,"dev"));cov_19u1edm9ru.s[4]++;ok((cov_19u1edm9ru.b[1][0]++,env==="prod")||(cov_19u1edm9ru.b[1][1]++,env==="dev"),"environment invÃ¡lida! Ou prod ou dev");const configPath=(cov_19u1edm9ru.s[5]++,join('./config',`.env.${env}`));cov_19u1edm9ru.s[6]++;config({path:configPath});const Hapi=(cov_19u1edm9ru.s[7]++,require('hapi'));const Context=(cov_19u1edm9ru.s[8]++,require('./src/db/strategies/base/contextStrategy'));const MongoDB=(cov_19u1edm9ru.s[9]++,require('./src/db/strategies/mongodb/mongoDbStrategy'));const HeroRoutes=(cov_19u1edm9ru.s[10]++,require('./src/routes/heroRoutes'));const HeroSchema=(cov_19u1edm9ru.s[11]++,require('./src/db/strategies/mongodb/schemas/heroSchema'));const AuthRoutes=(cov_19u1edm9ru.s[12]++,require('./src/routes/authRoutes'));const UserSchema=(cov_19u1edm9ru.s[13]++,require('./src/db/strategies/mongodb/schemas/userSchema'));const UtilRoutes=(cov_19u1edm9ru.s[14]++,require('./src/routes/utilRoutes'));const HapiSwagger=(cov_19u1edm9ru.s[15]++,require('hapi-swagger'));const Inert=(cov_19u1edm9ru.s[16]++,require('inert'));const Vision=(cov_19u1edm9ru.s[17]++,require('vision'));const HapiJwt=(cov_19u1edm9ru.s[18]++,require('hapi-auth-jwt2'));const MINHA_CHAVE_SECRETA=(cov_19u1edm9ru.s[19]++,process.env.JWT_KEY);const swaggerConfig=(cov_19u1edm9ru.s[20]++,{info:{title:'#CursoNodeBR - API Herois',version:'v1.0'},lang:'pt'});const app=(cov_19u1edm9ru.s[21]++,new Hapi.Server({port:process.env.PORT}));function mapRoutes(instance,methods){cov_19u1edm9ru.f[0]++;cov_19u1edm9ru.s[22]++;return methods.map(method=>{cov_19u1edm9ru.f[1]++;cov_19u1edm9ru.s[23]++;return instance[method]();});}async function main(){cov_19u1edm9ru.f[2]++;// const connectionPostgres = await PostgresDB.connect()
// const model = await PostgresDB.defineModel(connectionPostgres, UserSchema)
//const postgresModel = new Context(new PostgresDB(connectionPostgres, model));
const connection=(cov_19u1edm9ru.s[24]++,MongoDB.connect());const mongoDbHero=(cov_19u1edm9ru.s[25]++,new Context(new MongoDB(connection,HeroSchema)));const mongoDbUser=(cov_19u1edm9ru.s[26]++,new Context(new MongoDB(connection,UserSchema)));cov_19u1edm9ru.s[27]++;await app.register([HapiJwt,Inert,Vision,{plugin:HapiSwagger,options:swaggerConfig}]);cov_19u1edm9ru.s[28]++;app.auth.strategy('jwt','jwt',{key:MINHA_CHAVE_SECRETA,validate:(dado,request)=>{cov_19u1edm9ru.f[3]++;cov_19u1edm9ru.s[29]++;return{isValid:true};}});cov_19u1edm9ru.s[30]++;app.auth.default('jwt');cov_19u1edm9ru.s[31]++;app.route([...mapRoutes(new UtilRoutes(),UtilRoutes.methods()),...mapRoutes(new HeroRoutes(mongoDbHero),HeroRoutes.methods()),...mapRoutes(new AuthRoutes(MINHA_CHAVE_SECRETA,mongoDbUser),AuthRoutes.methods())]);cov_19u1edm9ru.s[32]++;await app.start();cov_19u1edm9ru.s[33]++;console.log('server running at',app.info.port);cov_19u1edm9ru.s[34]++;return app;}cov_19u1edm9ru.s[35]++;module.exports=main();